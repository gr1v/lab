def fibonacci_search(arr, target):
    """
    Реализует алгоритм поиска по Фибоначчи в отсортированном массиве.
    
    :param arr: Отсортированный список целых чисел
    :param target: Целевое значение для поиска
    :return: Индекс элемента, если найден, иначе -1
    """
    # Создаем массив первых фибоначчиевых чисел, достаточный для покрытия длины массива
    fib_numbers = []
    a, b = 0, 1
    while b < len(arr):
        fib_numbers.append(b)
        a, b = b, a+b
    m = len(fib_numbers)-1  # Последний индекс в массиве фибоначчиевых чисел
    
    offset = -1  # Смещение начала окна поиска
    while m > 0:
        # Рассчитываем индекс в массиве, соответствующий числу Фибоначчи
        idx = min(offset+fib_numbers[m-1], len(arr)-1)
        
        # Если целевой элемент больше элемента в текущей позиции, двигаемся дальше
        if arr[idx] < target:
            offset = idx
            m -= 1
        # Если целевой элемент меньше, двигаемся назад
        elif arr[idx] > target:
            m -= 2
        # Найдено точное совпадение
        else:
            return idx
    
    # Если ничего не найдено, возвращаем -1
    return -1


# Пример использования
if __name__ == "__main__":
    arr = [10, 22, 35, 40, 45, 50, 80, 82, 85, 90, 100]
    target = 85
    result = fibonacci_search(arr, target)
    
    if result != -1:
        print(f"Элемент {target} найден на позиции {result}")
    else:
        print(f"Элемент {target} не найден")